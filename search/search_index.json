{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcbb Ejah Data Structures Python Package","text":"<p>Welcome to the documentation for the Ejah Data Structures Python package. This Python package offers a collection of essential data structures including arrays, queues, stacks, linked lists, binary trees, and binary graph search implemented in Python for the purpose of learning and practice.</p>"},{"location":"#modules","title":"\ud83d\udcbb Modules","text":""},{"location":"#array","title":"\u23a1 Array","text":"<p>Efficient dynamic array implementation with insert, delete, search, and traversal operations.</p>"},{"location":"#stack","title":"\ud83d\udcd2 Stack","text":"<p>A Stack stores items in a Last-In, First-Out (LIFO) order. This means the last item added is the first one to be removed.</p>"},{"location":"#queue","title":"\ud83d\udcf2 Queue","text":"<p>A Queue stores items in a First-In, First-Out (FIFO) order. This means the first item added is the first one to be removed.</p>"},{"location":"#singly-linked-list","title":"\u21c4 Singly Linked List","text":"<p>A Singly Linked List is a linear data structure where each element (node) points to the next with insert, delete, search and traverse capabilities.</p>"},{"location":"#binary-search","title":"\ud83d\udd0d Binary Search","text":"<p>A class-based binary search on sorted data with fast lookup.</p>"},{"location":"#binary-tree","title":"\ud83c\udf32 Binary Tree","text":"<p>A tree structure that allows insertion, search, and in-order traversal of elements in sorted order.</p>"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<p>Each module comes with its own set of:</p> <ul> <li>Method descriptions</li> <li>Code examples</li> <li>Return types and expected output</li> </ul>"},{"location":"#good-for","title":"\ud83c\udf93 Good For","text":"<ul> <li>Computer Science Students</li> <li>Coding Interview Preparation</li> </ul>"},{"location":"#how-to-use","title":"\u2757 How to Use","text":"<p>To install the package, run the following command in your Python environment:</p> <pre><code>pip install ejahdilandatastruct==0.1.1\n</code></pre>"},{"location":"#contribute-to-the-project","title":"\ud83e\udd1d Contribute to the Project","text":"<p>If you'd like to contribute to this project, please visit the GitHub repository.</p>"},{"location":"arrays/","title":"<code>Array</code> Class Documentation","text":"<p>The <code>Array</code> class provides a simple implementation of an array-like data structure with basic operations such as insertion, deletion, searching, and traversal. Below is a breakdown of each method and the functionality of the class.</p>"},{"location":"arrays/#class-overview","title":"Class Overview","text":"<p>The <code>Array</code> class simulates an array-like structure with the ability to perform the following operations: - Insertion of values at specified indices. - Deletion of values from specified indices. - Searching for values within the array. - Traversing the array to return all its elements. - Checking the length of the array. - Checking if the array is empty.</p> <p>Internally, the class uses a list to store the elements.</p>"},{"location":"arrays/#methods","title":"Methods","text":""},{"location":"arrays/#__init__self","title":"<code>__init__(self)</code>","text":"<p>The constructor method initializes an empty list (<code>self.array</code>), which will be used to store elements in the array.</p> <p>Usage:</p> <pre><code>arr = Array()\n</code></pre>"},{"location":"arrays/#insertself-index-value","title":"<code>insert(self, index, value)</code>","text":"<p>This method inserts a value at the specified index.</p> <p>Parameters:</p> <ul> <li><code>index</code> (int): The index at which the value should be inserted.</li> <li><code>value</code> (any): The value to insert into the array.</li> </ul> <p>Error Handling: - If the <code>index</code> is out of bounds (either less than 0 or greater than the length of the array), it prints an error message: <code>\"Error: Index out of bounds.\"</code></p> <p>Example:</p> <pre><code>arr = Array()\narr.insert(2, 14)  # Inserts 14 at index 2\narr.insert(0, 30)  # Inserts 30 at index 0\n</code></pre>"},{"location":"arrays/#deleteself-index","title":"<code>delete(self, index)</code>","text":"<p>This method deletes the element at the specified index.</p> <p>Parameters: - <code>index</code> (int): The index of the element to delete.</p> <p>Error Handling: - If the <code>index</code> is out of bounds (less than 0 or greater than or equal to the length of the array), it prints an error message: <code>\"Error: Index out of bounds.\"</code></p> <p>Example:</p> <pre><code>arr = Array()\narr.insert(0, 14)\narr.insert(1, 30)\narr.delete(1)  # Deletes the element at index 1\n</code></pre>"},{"location":"arrays/#searchself-value","title":"<code>search(self, value)</code>","text":"<p>This method searches for a value in the array and returns its index if found, or -1 if the value is not found.</p> <p>Parameters: - <code>value</code> (any): The value to search for.</p> <p>Returns: - The index of the value if it is found, otherwise -1.</p> <p>Example:</p> <pre><code>arr = Array()\narr.insert(0, 12)\narr.insert(1, 20)\narr.search(12)  # Returns 0\narr.search(25)  # Returns -1\n</code></pre>"},{"location":"arrays/#traverseself","title":"<code>traverse(self)</code>","text":"<p>This method returns all the elements in the array as a list.</p> <p>Returns: - The array (list of elements).</p> <p>Example:</p> <pre><code>arr = Array()\narr.insert(0, 20)\narr.insert(1, 5)\narr.traverse()  # Returns [20, 5]\n\n</code></pre>"},{"location":"arrays/#lengthself","title":"<code>length(self)</code>","text":"<p>This method returns the number of elements in the array.</p> <p>Returns: - The length (number of elements) of the array.</p> <p>Example:</p> <pre><code>arr = Array()\narr.insert(0, 40)\narr.length()  # Returns 1\n</code></pre>"},{"location":"arrays/#is_emptyself","title":"<code>is_empty(self)</code>","text":"<p>This method checks if the array is empty.</p> <p>Returns:</p> <ul> <li><code>True</code> if the array is empty.  </li> <li><code>False</code> if the array contains any elements.</li> </ul> <p>Example:</p> <pre><code>arr = Array()\narr.is_empty()  # Returns True\narr.insert(0, 18)\narr.is_empty()  # Returns False\n</code></pre>"},{"location":"arrays/#__str__self","title":"<code>__str__(self)</code>","text":"<p>This method provides a string representation of the array for easy printing.</p> <p>Returns: - A string in the format: <code>\"Array: [elements]\"</code></p> <p>Example:</p> <pre><code>arr = Array()\narr.insert(0, 10)\narr.insert(1, 20)\nprint(arr)  # Uses __str__ method\n</code></pre>"},{"location":"arrays/#example","title":"Example","text":""},{"location":"arrays/#example-usage-of-the-array-class","title":"Example Usage of the <code>Array</code> Class","text":"<pre><code># Create an instance of Array\narr = Array()\n\n# Insert elements\narr.insert(0, 12)\narr.insert(1, 14)\narr.insert(2, 16)\n\n# Traverse the array\nprint(arr.traverse())  # Output: [12, 14, 16]\n\n# Search for a value\nprint(arr.search(12))  # Output: 1\nprint(arr.search(20))  # Output: -1\n\n# Delete an element\narr.delete(1)  # Deletes the element at index 1 (12)\nprint(arr.traverse())  # Output: [14, 16]\n\n# Check the length of the array\nprint(arr.length())  # Output: 2\n\n# Check if the array is empty\nprint(arr.is_empty())  # Output: False\n</code></pre>"},{"location":"graph/","title":"<code>BinaryGraphSearch</code> Class Documentation","text":""},{"location":"graph/#overview","title":"Overview","text":"<p>The <code>BinaryGraphSearch</code> class implements binary search operations on a sorted list. It provides methods to search for a target element, insert a value while maintaining the order of the list, and traverse the list in order.</p>"},{"location":"graph/#methods","title":"Methods","text":""},{"location":"graph/#__init__self-data","title":"<code>__init__(self, data)</code>","text":"<p>This method initializes the <code>BinaryGraphSearch</code> instance with a sorted list.</p> <p>Parameters: - <code>data</code> (list): A list of elements that must be sorted in non-decreasing order.</p> <p>Raises: - <code>ValueError</code>: If the input list is not sorted in non-decreasing order.</p> <p>Example:</p> <pre><code>graph = BinaryGraphSearch([1, 2, 3, 4, 5])  # Valid sorted list\n</code></pre>"},{"location":"graph/#_binary_searchself-data-target","title":"<code>_binary_search(self, data, target)</code>","text":"<p>This is a helper function that performs a recursive binary search on a given sorted list.</p> <p>Parameters: - <code>data</code> (list): The sorted list to search. - <code>target</code> (any): The value to search for in the list.</p> <p>Returns: - <code>int</code>: The index of the target element in the list if found, otherwise <code>-1</code>.</p> <p>Example:</p> <pre><code>graph._binary_search([1, 2, 3, 4, 5], 3)  # Returns 2\n</code></pre>"},{"location":"graph/#searchself-target","title":"<code>search(self, target)</code>","text":"<p>This method searches for a target element in the sorted list using binary search.</p> <p>Parameters: - <code>target</code> (any): The value to search for in the list.</p> <p>Returns: - <code>int</code>: The index of the target element if found, otherwise <code>-1</code>.</p> <p>Example:</p> <pre><code>graph = BinaryGraphSearch([1, 2, 3, 4, 5])\nprint(graph.search(3))  # Returns 2\nprint(graph.search(6))  # Returns -1\n</code></pre>"},{"location":"graph/#insertself-value","title":"<code>insert(self, value)</code>","text":"<p>This method inserts a value into the sorted list, maintaining the order.</p> <p>Parameters: - <code>value</code> (any): The value to insert into the list.</p> <p>Example:</p> <pre><code>graph = BinaryGraphSearch([1, 2, 3, 5])\ngraph.insert(4)  # Inserts 4 maintaining the order\nprint(graph)  # Output: Sorted List: [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"graph/#inorder_traversalself","title":"<code>inorder_traversal(self)</code>","text":"<p>This method returns the sorted list, simulating an in-order traversal.</p> <p>Returns: - <code>list</code>: The sorted list of elements.</p> <p>Example:</p> <pre><code>graph = BinaryGraphSearch([1, 2, 3, 4, 5])\nprint(graph.inorder_traversal())  # Returns [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"graph/#__str__self","title":"<code>__str__(self)</code>","text":"<p>This method provides a string representation of the object.</p> <p>Returns: - <code>str</code>: A string representation of the sorted list in the format \"Sorted List: [elements]\".</p> <p>Example:</p> <pre><code>graph = BinaryGraphSearch([1, 2, 3, 4, 5])\nprint(graph)  # Output: Sorted List: [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"graph/#example","title":"Example","text":""},{"location":"graph/#example-usage-of-binarygraphsearch-class","title":"Example Usage of <code>BinaryGraphSearch</code> Class","text":"<pre><code># Create an instance of BinaryGraphSearch with a sorted list\ngraph = BinaryGraphSearch([1, 2, 3, 4, 5])\n\n# Search for an element\nprint(graph.search(2))  # Output: 2\nprint(graph.search(8))  # Output: -1\n\n# Insert a new element while maintaining the order\ngraph.insert(4)  # Does not change the list\nprint(graph)  # Output: Sorted List: [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"linked_lists/","title":"<code>SinglyLinkedList</code> Class Documentation","text":""},{"location":"linked_lists/#overview","title":"Overview","text":"<p>The <code>SinglyLinkedList</code> class implements a singly linked list, a linear data structure where each element (node) points to the next element in the list. This class supports basic linked list operations such as insertion, deletion, searching, and traversal.</p>"},{"location":"linked_lists/#methods","title":"Methods","text":""},{"location":"linked_lists/#__init__self","title":"<code>__init__(self)</code>","text":"<p>Initializes the singly linked list with an empty list (<code>head</code> is set to <code>None</code>).</p> <ul> <li>No parameters.</li> <li>Returns: None</li> </ul>"},{"location":"linked_lists/#insertself-data","title":"<code>insert(self, data)</code>","text":"<p>Inserts a new node with the given data at the end of the list.</p> <ul> <li>Parameters:</li> <li><code>data</code> (any type): The value to be stored in the new node.</li> <li> <p>Returns: None</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>linked_list = SinglyLinkedList()\nlinked_list.insert(5)\nlinked_list.insert(15)\nprint(linked_list.traverse())  # Output: [5, 15]\n</code></pre>"},{"location":"linked_lists/#deleteself-data","title":"<code>delete(self, data)</code>","text":"<p>Deletes the first occurrence of the node with the specified data.</p> <ul> <li>Parameters:</li> <li><code>data</code> (any type): The value of the node to be deleted.</li> <li>Returns: </li> <li><code>True</code> if the node was found and deleted.</li> <li> <p><code>False</code> if no node with the specified data was found.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>linked_list = SinglyLinkedList()\nlinked_list.insert(5)\nlinked_list.insert(15)\nlinked_list.delete(5)\nprint(linked_list.traverse())  # Output: [15]\n</code></pre>"},{"location":"linked_lists/#searchself-data","title":"<code>search(self, data)</code>","text":"<p>Searches for a node with the given data.</p> <ul> <li>Parameters:</li> <li><code>data</code> (any type): The value of the node to search for.</li> <li>Returns: </li> <li><code>True</code> if a node with the specified data is found.</li> <li> <p><code>False</code> if no node with the specified data is found.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>linked_list = SinglyLinkedList()\nlinked_list.insert(10)\nlinked_list.insert(20)\nprint(linked_list.search(10))  # Output: True\nprint(linked_list.search(30))  # Output: False\n</code></pre>"},{"location":"linked_lists/#traverseself","title":"<code>traverse(self)</code>","text":"<p>Returns a list of all node data in the linked list from head to tail.</p> <ul> <li> <p>Returns: A list of the node data in the order they appear in the list.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>linked_list = SinglyLinkedList()\nlinked_list.insert(7)\nlinked_list.insert(14)\nprint(linked_list.traverse())  # Output: [7, 14]\n</code></pre>"},{"location":"linked_lists/#__str__self","title":"<code>__str__(self)</code>","text":"<p>Returns a string representation of the linked list, showing each node's data in a human-readable format.</p> <ul> <li> <p>Returns: A string representing the linked list. If the list is empty, it returns <code>\"Empty\"</code>.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>linked_list = SinglyLinkedList()\nlinked_list.insert(5)\nlinked_list.insert(12)\nprint(str(linked_list))  # Output: \"5 -&gt; 12\"\nlinked_list.delete(5)\nprint(str(linked_list))  # Output: \"12\"\n</code></pre>"},{"location":"linked_lists/#example-usage","title":"Example Usage","text":""},{"location":"linked_lists/#example-usage-of-singlylinkedlist-class","title":"Example Usage of <code>SinglyLinkedList</code> Class","text":"<pre><code># Create a new SinglyLinkedList\nlinked_list = SinglyLinkedList()\n\n# Insert elements\nlinked_list.insert(7)\nlinked_list.insert(14)\nlinked_list.insert(21)\n\n# Traverse the list\nprint(linked_list.traverse())  # Output: [7, 14, 21]\n\n# Search for an element\nprint(linked_list.search(14))  # Output: True\nprint(linked_list.search(28))  # Output: False\n\n# Delete an element\nlinked_list.delete(14)\nprint(linked_list.traverse())  # Output: [7, 21]\n\n</code></pre>"},{"location":"queue/","title":"<code>Queue</code> Class Documentation","text":""},{"location":"queue/#overview","title":"Overview","text":"<p>The <code>Queue</code> class implements a queue data structure using a list. A queue follows the FIFO (First-In-First-Out) principle, where elements are added at the end (enqueue) and removed from the front (dequeue). This class provides basic queue operations such as enqueue, dequeue, peek, and checks if the queue is empty.</p>"},{"location":"queue/#methods","title":"Methods","text":""},{"location":"queue/#__init__self","title":"<code>__init__(self)</code>","text":"<p>Initializes an empty queue using a list.</p> <ul> <li>Parameters: None</li> <li>Returns: None</li> </ul>"},{"location":"queue/#enqueueself-item","title":"<code>enqueue(self, item)</code>","text":"<p>Adds an item to the end of the queue.</p> <ul> <li>Parameters:</li> <li><code>item</code> (any type): The element to be added to the queue.</li> <li> <p>Returns: None</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>queue = Queue()\nqueue.enqueue(5)\nqueue.enqueue(15)\nprint(queue)  # Output: Queue([5, 15])\n</code></pre>"},{"location":"queue/#dequeueself","title":"<code>dequeue(self)</code>","text":"<p>Removes and returns the front item from the queue.</p> <ul> <li>Returns: The front item of the queue.</li> <li>Raises:</li> <li> <p><code>IndexError</code>: If the queue is empty.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>queue = Queue()\nqueue.enqueue(30)\nqueue.enqueue(40)\nprint(queue.dequeue())  # Output: 30\nprint(queue)  # Output: Queue([40])\n</code></pre>"},{"location":"queue/#peekself","title":"<code>peek(self)</code>","text":"<p>Returns the front item without removing it.</p> <ul> <li>Returns: The front item of the queue.</li> <li>Raises:</li> <li> <p><code>IndexError</code>: If the queue is empty.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>queue = Queue()\nqueue.enqueue(10)\nqueue.enqueue(20)\nprint(queue.peek())  # Output: 10\n</code></pre>"},{"location":"queue/#is_emptyself","title":"<code>is_empty(self)</code>","text":"<p>Checks if the queue is empty.</p> <ul> <li>Returns: </li> <li><code>True</code>: If the queue is empty.</li> <li> <p><code>False</code>: If the queue contains at least one item.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>queue = Queue()\nprint(queue.is_empty())  # Output: True\nqueue.enqueue(18)\nprint(queue.is_empty())  # Output: False\n</code></pre>"},{"location":"queue/#__str__self","title":"<code>__str__(self)</code>","text":"<p>Returns a string representation of the queue.</p> <ul> <li> <p>Returns: A string in the format <code>Queue([item1, item2, item3, ...])</code>.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>queue = Queue()\nqueue.enqueue(16)\nqueue.enqueue(20)\nprint(str(queue))  # Output: \"Queue([16, 20])\"\n</code></pre>"},{"location":"queue/#example-usage","title":"Example Usage","text":""},{"location":"queue/#example-usage-of-queue-class","title":"Example Usage of <code>Queue</code> Class","text":"<pre><code># Create a new Queue\nqueue = Queue()\n\n# Enqueue elements\nqueue.enqueue(50)\nqueue.enqueue(60)\nqueue.enqueue(70)\n\n# Print the queue\nprint(queue)  # Output: Queue([50, 60, 70])\n\n# Peek at the front item\nprint(queue.peek())  # Output: 50\n\n# Dequeue an item\nprint(queue.dequeue())  # Output: 50\n\n# Print the updated queue\nprint(queue)  # Output: Queue([60, 70])\n\n# Check if the queue is empty\nprint(queue.is_empty())  # Output: False\n\n# Dequeue the remaining items\nqueue.dequeue()\nqueue.dequeue()\n\n# Check if the queue is empty again\nprint(queue.is_empty())  # Output: True\n</code></pre>"},{"location":"stack/","title":"<code>Stack</code> Class Documentation","text":""},{"location":"stack/#overview","title":"Overview","text":"<p>The <code>Stack</code> class implements a stack data structure using a list. A stack follows the LIFO (Last-In-First-Out) principle, where elements are added to the top (push) and removed from the top (pop). This class provides basic stack operations such as push, pop, peek, and checks if the stack is empty.</p>"},{"location":"stack/#methods","title":"Methods","text":""},{"location":"stack/#__init__self","title":"<code>__init__(self)</code>","text":"<p>Initializes an empty stack using a list.</p> <ul> <li>Parameters: None</li> <li>Returns: None</li> </ul>"},{"location":"stack/#pushself-item","title":"<code>push(self, item)</code>","text":"<p>Adds an item to the top of the stack.</p> <ul> <li>Parameters:</li> <li><code>item</code> (any type): The element to be added to the stack.</li> <li> <p>Returns: None</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>stack = Stack()\nstack.push(30)\nstack.push(40)\nprint(stack)  # Output: Stack([30, 40])\n</code></pre>"},{"location":"stack/#popself","title":"<code>pop(self)</code>","text":"<p>Removes and returns the top item from the stack.</p> <ul> <li>Returns: The top item of the stack.</li> <li>Raises:</li> <li> <p><code>IndexError</code>: If the stack is empty.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>stack = Stack()\nstack.push(50)\nstack.push(60)\nprint(stack.pop())  # Output: 60\nprint(stack)  # Output: Stack([50])\n</code></pre>"},{"location":"stack/#peekself","title":"<code>peek(self)</code>","text":"<p>Returns the top item without removing it.</p> <ul> <li>Returns: The top item of the stack.</li> <li>Raises:</li> <li> <p><code>IndexError</code>: If the stack is empty.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>stack = Stack()\nstack.push(30)\nstack.push(40)\nprint(stack.peek())  # Output: 40\n</code></pre>"},{"location":"stack/#is_emptyself","title":"<code>is_empty(self)</code>","text":"<p>Checks if the stack is empty.</p> <ul> <li>Returns:</li> <li><code>True</code>: If the stack is empty.</li> <li> <p><code>False</code>: If the stack contains at least one item.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>stack = Stack()\nprint(stack.is_empty())  # Output: True\nstack.push(13)\nprint(stack.is_empty())  # Output: False\n</code></pre>"},{"location":"stack/#__str__self","title":"<code>__str__(self)</code>","text":"<p>Returns a string representation of the stack.</p> <ul> <li> <p>Returns: A string in the format <code>Stack([item1, item2, item3, ...])</code>.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>stack = Stack()\nstack.push(14)\nstack.push(18)\nprint(str(stack))  # Output: \"Stack([14, 18])\"\n</code></pre>"},{"location":"stack/#example-usage","title":"Example Usage","text":""},{"location":"stack/#example-usage-of-stack-class","title":"Example Usage of <code>Stack</code> Class","text":"<pre><code># Create a new Stack\nstack = Stack()\n\n# Push elements onto the stack\nstack.push(50)\nstack.push(60)\nstack.push(70)\n\n# Print the stack\nprint(stack)  # Output: Stack([50, 60, 70])\n\n# Peek at the top item\nprint(stack.peek())  # Output: 70\n\n# Pop an item\nprint(stack.pop())  # Output: 70\n\n# Print the updated stack\nprint(stack)  # Output: Stack([50, 60])\n\n# Check if the stack is empty\nprint(stack.is_empty())  # Output: False\n\n# Pop the remaining items\nstack.pop()\nstack.pop()\n\n# Check if the stack is empty again\nprint(stack.is_empty())  # Output: True\n</code></pre>"},{"location":"tree/","title":"<code>BinarySearchTree</code> Class Documentation","text":""},{"location":"tree/#overview","title":"Overview","text":"<p>The <code>BinarySearchTree</code> class implements a binary search tree data structure. A binary search tree is a tree where each node has at most two children, and the left child is smaller than the parent node, while the right child is larger. This class provides methods for inserting, searching, and performing inorder traversal of the tree.</p>"},{"location":"tree/#attributes","title":"Attributes","text":"<ul> <li><code>root</code>: The root node of the binary search tree. Initially set to <code>None</code>.</li> </ul>"},{"location":"tree/#methods","title":"Methods","text":""},{"location":"tree/#__init__self","title":"<code>__init__(self)</code>","text":"<p>Initializes an empty binary search tree.</p> <ul> <li>Parameters: None</li> <li>Returns: None</li> </ul>"},{"location":"tree/#insertself-data","title":"<code>insert(self, data)</code>","text":"<p>Inserts a new node with the given data into the binary search tree. It places the node at the correct position based on BST properties (left for smaller values, right for larger values).</p> <ul> <li>Parameters:</li> <li><code>data</code> (any type): The data to be inserted into the tree.</li> <li> <p>Returns: None</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>bst = BinarySearchTree()\nbst.insert(10)\nbst.insert(5)\nbst.insert(15)\nprint(bst)  # Output: 5 -&gt; 10 -&gt; 15\n</code></pre>"},{"location":"tree/#searchself-data","title":"<code>search(self, data)</code>","text":"<p>Searches for a node with the given data in the binary search tree.</p> <ul> <li>Parameters:</li> <li><code>data</code> (any type): The data to search for in the tree.</li> <li>Returns:</li> <li><code>True</code>: If the data is found in the tree.</li> <li> <p><code>False</code>: If the data is not found.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>bst = BinarySearchTree()\nbst.insert(10)\nbst.insert(5)\nbst.insert(15)\nprint(bst.search(10))  # Output: True\nprint(bst.search(20))  # Output: False\n</code></pre>"},{"location":"tree/#_insert_recursiveself-node-data","title":"<code>_insert_recursive(self, node, data)</code>","text":"<p>Helper function (often prefixed with an underscore to indicate it\u2019s meant for internal use) to recursively insert a new node into the tree.</p> <ul> <li>Parameters:</li> <li><code>node</code>: The current node being examined for insertion.</li> <li><code>data</code> (any type): The data to be inserted.</li> <li>Returns: None (Recursive insertion)</li> </ul>"},{"location":"tree/#_search_recursiveself-node-data","title":"<code>_search_recursive(self, node, data)</code>","text":"<p>Helper function (often prefixed with an underscore to indicate it\u2019s meant for internal use) to recursively search for a node with the given data.</p> <ul> <li>Parameters:</li> <li><code>node</code>: The current node being examined.</li> <li><code>data</code> (any type): The data to search for.</li> <li>Returns:</li> <li><code>True</code>: If the data is found in the tree.</li> <li><code>False</code>: If the data is not found.</li> </ul>"},{"location":"tree/#_inorder_recursiveself-node-elements","title":"<code>_inorder_recursive(self, node, elements)</code>","text":"<p>Helper function (often prefixed with an underscore to indicate it\u2019s meant for internal use) for performing an inorder traversal of the tree.</p> <ul> <li>Parameters:</li> <li><code>node</code>: The current node being examined during traversal.</li> <li><code>elements</code> (list): A list to store the nodes during traversal.</li> <li>Returns: None (Recursive traversal)</li> </ul>"},{"location":"tree/#inorder_traversalself","title":"<code>inorder_traversal(self)</code>","text":"<p>Returns a list of the elements in the binary search tree in inorder (left, root, right).</p> <ul> <li>Returns: </li> <li> <p>A list of elements in the tree sorted in ascending order.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>bst = BinarySearchTree()\nbst.insert(10)\nbst.insert(5)\nbst.insert(15)\nprint(bst.inorder_traversal())  # Output: [5, 10, 15]\n</code></pre>"},{"location":"tree/#__str__self","title":"<code>__str__(self)</code>","text":"<p>Returns a string representation of the binary search tree by performing an inorder traversal.</p> <ul> <li> <p>Returns: A string in the format <code>value1 -&gt; value2 -&gt; ...</code> for the elements in the tree.</p> </li> <li> <p>If the tree is empty, it returns <code>\"Empty\"</code>.</p> </li> <li> <p>Example:</p> </li> </ul> <pre><code>bst = BinarySearchTree()\nbst.insert(4)\nbst.insert(2)\nbst.insert(6)\nprint(str(bst))  # Output: \"2 -&gt; 4 -&gt; 6\"\n</code></pre>"},{"location":"tree/#example-usage","title":"Example Usage","text":""},{"location":"tree/#example-usage-of-binary-class","title":"Example Usage of <code>Binary</code> Class","text":"<pre><code># Create a new Binary Search Tree\nbst = BinarySearchTree()\n\n# Insert elements into the BST\nbst.insert(30)\nbst.insert(20)\nbst.insert(40)\nbst.insert(10)\nbst.insert(25)\n\n# Print the BST (Inorder Traversal)\nprint(bst)  # Output: 10 -&gt; 20 -&gt; 25 -&gt; 30 -&gt; 40\n\n# Search for an element in the BST\nprint(bst.search(25))  # Output: True\nprint(bst.search(50))  # Output: False\n\n# Get the elements in Inorder Traversal\nprint(bst.inorder_traversal())  # Output: [10, 20, 25, 30, 40]\n\n</code></pre>"}]}